pragma circom 2.1.0;

include "../circuits/add.circom";
include "../circuits/mul.circom";
include "circuits/half_ntt.circom";
include "circuits/add.circom";

template TestNTT() {
    log("\n********** TEST NTT **********\n");
    
    var n = 256;
    
    var in[n];
    for (var i = 0; i < n; i++) {
         in[i] = i;
    }
    var out[n] = halfNTT()(in);
    var should_be_in[n] = inv_halfNTT()(out);

    var should_be_out[256] = [2429, 2845, 425, 795, 1865, 1356, 624, 31, 2483, 2197, 2725, 
        2668, 2707, 517, 1488, 2194, 1971, 803, 922, 231, 2319, 613, 1075, 606, 306, 
        3143, 1380, 2718, 1155, 531, 818, 1586, 2874, 155, 304, 1442, 2619, 1712, 2169, 
        2159, 1479, 2634, 2864, 2014, 1679, 3200, 102, 1923, 1603, 558, 681, 316, 517, 
        931, 1732, 1999, 2024, 1094, 2276, 2159, 2187, 1973, 2637, 2158, 2373, 198, 2986, 
        247, 1482, 449, 1157, 1290, 1057, 2220, 1124, 1019, 400, 2206, 1225, 2233, 1376, 
        2880, 2664, 614, 1960, 1974, 2934, 2679, 2860, 2217, 2897, 3234, 1905, 36, 2306, 
        2145, 219, 581, 3000, 1378, 2392, 2835, 1685, 1091, 1054, 2150, 543, 3192, 2518, 
        3246, 2277, 570, 239, 2522, 838, 1990, 126, 2637, 126, 818, 3232, 1075, 940, 742, 
        2617, 630, 650, 2776, 2606, 482, 2208, 868, 1949, 2149, 3066, 1896, 2996, 2306, 
        63, 883, 2463, 1313, 1951, 2999, 97, 1806, 2830, 2104, 1771, 2453, 370, 2605, 871, 
        1467, 2426, 1985, 2363, 658, 1015, 655, 501, 664, 1249, 3120, 106, 3100, 1274, 1919,
        1890, 2147, 1961, 1949, 1738, 461, 2772, 1270, 3095, 2089, 1051, 2576, 1628, 1735,
        3195, 2034, 655, 524, 3195, 901, 2007, 1419, 157, 2334, 2344, 2825, 634, 850,
        2523, 2642, 672, 1604, 216, 3280, 1317, 905, 1165, 1532, 3059, 777, 242, 1752,
        2052, 533, 1006, 1858, 2336, 1183, 1656, 1668, 2037, 2946, 2184, 1048, 104, 
        2825, 877, 111, 1363, 1989, 1995, 659, 12, 506, 1551, 2022, 3212, 1591, 1637, 
        2330, 1625, 2795, 774, 70, 1002, 3194, 928, 987, 2717, 3005, 2883, 149, 2594, 
        3105, 2502, 2134, 2717, 2303
    ];

    var RESULT = 1;
    for (var i=0; i<n; i++) {
        RESULT = RESULT && (should_be_out[i] == out[i]);
    }

    for (var i=0; i<n; i++) {
        RESULT = RESULT && (in[i] == should_be_in[i]);
    }

    log("RESULT: ", RESULT, "\n");
    signal output result <-- RESULT;
}

template TestNTTadd() {
    log("\n********** TEST NTT Mult **********\n");
    
    var n = 256;
    var q = 3329;
    
    var in1[n];
    var in2[n];
    for (var i = 0; i < n; i++) {
        in1[i] = i;
        in2[i] = 2 * i;
    }

    var in1_hat[n] = halfNTT()(in1);
    var in2_hat[n] = halfNTT()(in2);

    var in1_in2_hat[n];
    for (var i = 0; i < n; i++) {
        in1_in2_hat[i] = FastAddMod(q)([in1_hat[i],in2_hat[i]]);
    }

    var out[n] = inv_halfNTT()(in1_in2_hat);
    
    var should_be_out[n] = [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 243, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 291, 294, 297, 300, 303, 306, 309, 312, 315, 318, 321, 324, 327, 330, 333, 336, 339, 342, 345, 348, 351, 354, 357, 360, 363, 366, 369, 372, 375, 378, 381, 384, 387, 390, 393, 396, 399, 402, 405, 408, 411, 414, 417, 420, 423, 426, 429, 432, 435, 438, 441, 444, 447, 450, 453, 456, 459, 462, 465, 468, 471, 474, 477, 480, 483, 486, 489, 492, 495, 498, 501, 504, 507, 510, 513, 516, 519, 522, 525, 528, 531, 534, 537, 540, 543, 546, 549, 552, 555, 558, 561, 564, 567, 570, 573, 576, 579, 582, 585, 588, 591, 594, 597, 600, 603, 606, 609, 612, 615, 618, 621, 624, 627, 630, 633, 636, 639, 642, 645, 648, 651, 654, 657, 660, 663, 666, 669, 672, 675, 678, 681, 684, 687, 690, 693, 696, 699, 702, 705, 708, 711, 714, 717, 720, 723, 726, 729, 732, 735, 738, 741, 744, 747, 750, 753, 756, 759, 762, 765];

    var RESULT = 1;
    for (var i=0; i<n; i++) {
        RESULT = RESULT && (should_be_out[i] == out[i]);
    }

    log("RESULT: ", RESULT, "\n");
    signal output result <-- RESULT;
}

template TestNTTmul() {
    log("\n********** TEST NTT Mult **********\n");
    
    var n = 256;
    
    var in1[n];
    var in2[n];
    for (var i = 0; i < n; i++) {
        in1[i] = i;
        in2[i] = 2 * i;
    }

    var in1_hat[n] = halfNTT()(in1);
    var in2_hat[n] = halfNTT()(in2);

    var in1_in2_hat[n] = multiply_nttvec()(in1_hat,in2_hat);

    var out[n] = inv_halfNTT()(in1_in2_hat);
    
    var should_be_out[n] = [400, 2212, 1211, 730, 773, 1344, 2447, 757, 2936, 2330, 2272, 2766, 487, 2097, 942, 355, 340, 901, 2042, 438, 2751, 2327, 2499, 3271, 1318, 3302, 2569, 2452, 2955, 753, 2508, 1566, 1260, 1594, 2572, 869, 3147, 2752, 3017, 617, 2214, 1154, 770, 1066, 2046, 385, 2745, 2472, 2899, 701, 2540, 1762, 1700, 2358, 411, 2521, 2034, 2283, 3272, 1676, 828, 732, 1392, 2812, 1667, 1290, 1685, 2856, 1478, 884, 1078, 2064, 517, 3099, 3156, 692, 2369, 1533, 1517, 2325, 632, 3100, 3075, 561, 2220, 1398, 1428, 2314, 731, 12, 161, 1182, 3079, 2527, 2859, 750, 2862, 2541, 3120, 1274, 336, 310, 1200, 3010, 2415, 2748, 684, 2885, 2697, 124, 1828, 1155, 1438, 2681, 1559, 1405, 2223, 688, 133, 562, 1979, 1059, 1135, 2211, 962, 721, 1492, 3279, 2757, 3259, 1460, 693, 962, 2271, 1295, 1367, 2491, 1342, 1253, 2228, 942, 728, 1590, 203, 3229, 685, 2562, 2206, 2950, 1469, 1096, 1835, 361, 7, 777, 2675, 2376, 3213, 1861, 1653, 2593, 1356, 1275, 2354, 1268, 1350, 2604, 1705, 1986, 122, 2775, 3291, 1674, 1257, 2044, 710, 588, 1682, 667, 876, 2313, 1653, 2229, 716, 447, 1426, 328, 486, 1904, 1257, 1878, 442, 282, 1402, 477, 840, 2495, 2117, 3039, 1936, 2141, 329, 3162, 657, 2805, 2952, 1102, 588, 1414, 255, 444, 1985, 1553, 2481, 1444, 1775, 149, 3228, 1029, 214, 787, 2752, 2784, 887, 394, 1309, 307, 721, 2555, 2484, 512, 3301, 868, 3204, 326, 2225, 2247, 396, 5, 1078, 290, 974, 3134, 116, 1911, 1865, 3311, 2924, 708, 3325, 792, 3100, 266, 2281, 2491, 900];

    var RESULT = 1;
    for (var i=0; i<n; i++) {
        RESULT = RESULT && (should_be_out[i] == out[i]);
    }

    log("RESULT: ", RESULT, "\n");
    signal output result <-- RESULT;
}


template TestAll() {
    log("\n******************** TESTING ntt.circom ********************\n\n");

    var total = 1;
    var res;

    res = TestNTT()();
    total = total && res;

    res = TestNTTmul()();
    total = total && res;

    res = TestNTTadd()();
    total = total && res;

    log("********************\n", "TOTAL RESULT: ", total, "\n********************\n");
}

component main = TestAll();